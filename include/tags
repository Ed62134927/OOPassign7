!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/ed62134927/nccucs/oop/25-assign5/include/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/653ca9204/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
BLACK	unit.h	/^enum Color {BLACK=0, RED, GREEN, YELLOW, BLUE, PINK, CYAN, WHITE, NOCHANGE};$/;"	e	enum:Color
BLUE	unit.h	/^enum Color {BLACK=0, RED, GREEN, YELLOW, BLUE, PINK, CYAN, WHITE, NOCHANGE};$/;"	e	enum:Color
CONTROLLER_H	controller.h	/^#define CONTROLLER_H$/;"	d
CYAN	unit.h	/^enum Color {BLACK=0, RED, GREEN, YELLOW, BLUE, PINK, CYAN, WHITE, NOCHANGE};$/;"	e	enum:Color
Cell	icon.h	/^    Cell(Color c, std::string a) : color(c), ascii(a){}$/;"	f	struct:Cell
Cell	icon.h	/^struct Cell{$/;"	s
Color	unit.h	/^enum Color {BLACK=0, RED, GREEN, YELLOW, BLUE, PINK, CYAN, WHITE, NOCHANGE};$/;"	g
Controller	controller.h	/^class Controller{$/;"	c
ELEMENT_H	gameObject.h	/^#define ELEMENT_H$/;"	d
ENVIROMENT_H	environment.h	/^#define ENVIROMENT_H$/;"	d
GAMEOBJECTFACTORY_H	gameObjectFactory.h	/^#define GAMEOBJECTFACTORY_H$/;"	d
GAME_WINDOW_CELL_WIDTH	environment.h	/^constexpr int GAME_WINDOW_CELL_WIDTH = 2;$/;"	v	typeref:typename:int
GAME_WINDOW_HEIGHT	environment.h	/^constexpr int GAME_WINDOW_HEIGHT = 20;$/;"	v	typeref:typename:int
GAME_WINDOW_WIDTH	environment.h	/^constexpr int GAME_WINDOW_WIDTH = 20;$/;"	v	typeref:typename:int
GREEN	unit.h	/^enum Color {BLACK=0, RED, GREEN, YELLOW, BLUE, PINK, CYAN, WHITE, NOCHANGE};$/;"	e	enum:Color
GameObject	gameObject.h	/^class GameObject{$/;"	c
GameObjectFactory	gameObjectFactory.h	/^class GameObjectFactory{$/;"	c
ICONFACTORY_H	iconFactory.h	/^#define ICONFACTORY_H$/;"	d
ICON_H	icon.h	/^#define ICON_H$/;"	d
Icon	icon.h	/^using Icon = std::vector<std::vector<Cell>>;$/;"	t	typeref:typename:std::vector<std::vector<Cell>>
IconFactory	iconFactory.h	/^class IconFactory {$/;"	c
NOCHANGE	unit.h	/^enum Color {BLACK=0, RED, GREEN, YELLOW, BLUE, PINK, CYAN, WHITE, NOCHANGE};$/;"	e	enum:Color
PINK	unit.h	/^enum Color {BLACK=0, RED, GREEN, YELLOW, BLUE, PINK, CYAN, WHITE, NOCHANGE};$/;"	e	enum:Color
Position	unit.h	/^using Position = Vec2;$/;"	t	typeref:typename:Vec2
RED	unit.h	/^enum Color {BLACK=0, RED, GREEN, YELLOW, BLUE, PINK, CYAN, WHITE, NOCHANGE};$/;"	e	enum:Color
SPF	environment.h	/^constexpr double SPF = 1; \/\/ Second Per Frame $/;"	v	typeref:typename:double
UNIT_H	unit.h	/^#define UNIT_H$/;"	d
VIEW_H	view.h	/^#define VIEW_H$/;"	d
Vec2	unit.h	/^struct Vec2{$/;"	s
View	view.h	/^class View{$/;"	c
WHITE	unit.h	/^enum Color {BLACK=0, RED, GREEN, YELLOW, BLUE, PINK, CYAN, WHITE, NOCHANGE};$/;"	e	enum:Color
WINDOW_PIXEL_HEIGHT	environment.h	/^constexpr int WINDOW_PIXEL_HEIGHT = GAME_WINDOW_HEIGHT; $/;"	v	typeref:typename:int
WINDOW_PIXEL_WIDTH	environment.h	/^constexpr int WINDOW_PIXEL_WIDTH = GAME_WINDOW_WIDTH * GAME_WINDOW_CELL_WIDTH;$/;"	v	typeref:typename:int
YELLOW	unit.h	/^enum Color {BLACK=0, RED, GREEN, YELLOW, BLUE, PINK, CYAN, WHITE, NOCHANGE};$/;"	e	enum:Color
_ANSIPRINT_H	AnsiPrint.h	/^#define _ANSIPRINT_H$/;"	d
_icon	gameObject.h	/^    Icon _icon;$/;"	m	class:GameObject	typeref:typename:Icon
_move	gameObject.h	/^    bool _move;$/;"	m	class:GameObject	typeref:typename:bool
_objs	controller.h	/^    std::vector<GameObject*> _objs;$/;"	m	class:Controller	typeref:typename:std::vector<GameObject * >
_pos	gameObject.h	/^    Position _pos;$/;"	m	class:GameObject	typeref:typename:Position
_termHeight	view.h	/^    int _termHeight;$/;"	m	class:View	typeref:typename:int
_termWidth	view.h	/^    int _termWidth;$/;"	m	class:View	typeref:typename:int
_view	controller.h	/^    View& _view; $/;"	m	class:Controller	typeref:typename:View &
ascii	icon.h	/^    std::string ascii;$/;"	m	struct:Cell	typeref:typename:std::string
color	icon.h	/^    Color color;$/;"	m	struct:Cell	typeref:typename:Color
e1	unit.h	/^    int e1;$/;"	m	struct:Vec2	typeref:typename:int
e2	unit.h	/^    int e2;$/;"	m	struct:Vec2	typeref:typename:int
height	unit.h	/^    int& height(){return e2;}$/;"	f	struct:Vec2	typeref:typename:int &
last_bg_color	view.h	/^    std::vector<std::vector<Color>>       latest_bg_color, last_bg_color;$/;"	m	class:View	typeref:typename:std::vector<std::vector<Color>>
last_fg_color	view.h	/^    std::vector<std::vector<Color>>       latest_fg_color, last_fg_color;$/;"	m	class:View	typeref:typename:std::vector<std::vector<Color>>
last_map	view.h	/^    std::vector<std::vector<std::string>> latest_map, last_map;$/;"	m	class:View	typeref:typename:std::vector<std::vector<std::string>>
latest_bg_color	view.h	/^    std::vector<std::vector<Color>>       latest_bg_color, last_bg_color;$/;"	m	class:View	typeref:typename:std::vector<std::vector<Color>>
latest_fg_color	view.h	/^    std::vector<std::vector<Color>>       latest_fg_color, last_fg_color;$/;"	m	class:View	typeref:typename:std::vector<std::vector<Color>>
latest_map	view.h	/^    std::vector<std::vector<std::string>> latest_map, last_map;$/;"	m	class:View	typeref:typename:std::vector<std::vector<std::string>>
new_termios	controller.h	/^static struct termios old_termios, new_termios;$/;"	v	typeref:struct:termios
object	gameObjectFactory.h	/^class object : public GameObject{$/;"	c
old_termios	controller.h	/^static struct termios old_termios, new_termios;$/;"	v	typeref:struct:termios
width	unit.h	/^    int& width(){return e1;}$/;"	f	struct:Vec2	typeref:typename:int &
x	unit.h	/^    int& x(){ return e1;}$/;"	f	struct:Vec2	typeref:typename:int &
y	unit.h	/^    int& y(){ return e2;}$/;"	f	struct:Vec2	typeref:typename:int &
