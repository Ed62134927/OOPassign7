!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/ed62134927/nccucs/oop/25-assign5/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/653ca9204/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
AnsiPrint	AnsiPrint.cpp	/^AnsiPrint(const char *str, Color fg, Color bg, bool hi, bool blinking) {$/;"	f	typeref:typename:std::string
AnsiPrint	AnsiPrint.cpp	/^AnsiPrint(const char *str, bool hi, bool blinking) {$/;"	f	typeref:typename:std::string
Controller	controller.cpp	/^Controller::Controller(View& view) : _view(view){$/;"	f	class:Controller
PrintMyID	main.cpp	/^PrintMyID(std::string studId) {$/;"	f	typeref:typename:void
View	view.cpp	/^View::View() {$/;"	f	class:View
__anone8cbadd10102	view.cpp	/^    auto make_str_buf = [] {$/;"	f	function:View::View	file:
__anone8cbadd10202	view.cpp	/^    auto make_col_buf = [] {$/;"	f	function:View::View	file:
addGameObject	controller.cpp	/^void Controller::addGameObject(GameObject* obj) {$/;"	f	class:Controller	typeref:typename:void
bgBase	AnsiPrint.cpp	/^const char *bgBase="40;";$/;"	v	typeref:typename:const char *
blink	AnsiPrint.cpp	/^const char *blink="5;";$/;"	v	typeref:typename:const char *
clipToWidth	view.cpp	/^std::string clipToWidth(const std::string& txt, int maxWidth) {$/;"	f	typeref:typename:std::string
configure_terminal	controller.cpp	/^void configure_terminal() {$/;"	f	typeref:typename:void
createIcon	iconFactory.cpp	/^Icon IconFactory::createIcon(Color color, const std::string& ascii) {$/;"	f	class:IconFactory	typeref:typename:Icon
createObject	gameObjectFactory.cpp	/^GameObject* GameObjectFactory::createObject(Position pos, Icon icon,bool ismove){$/;"	f	class:GameObjectFactory	typeref:typename:GameObject *
displayWidth	view.cpp	/^int displayWidth(const std::string& utf8) {$/;"	f	typeref:typename:int
endc	AnsiPrint.cpp	/^const char *endc="m";$/;"	v	typeref:typename:const char *
fgBase	AnsiPrint.cpp	/^const char *fgBase="30;";$/;"	v	typeref:typename:const char *
getIcon	gameObject.cpp	/^Icon GameObject::getIcon() const {$/;"	f	class:GameObject	typeref:typename:Icon
getPosition	gameObject.cpp	/^Position GameObject::getPosition() const {$/;"	f	class:GameObject	typeref:typename:Position
get_terminal_size	view.cpp	/^std::pair<int,int> View::get_terminal_size() {$/;"	f	class:View	typeref:typename:std::pair<int,int>
getmove	gameObject.cpp	/^bool GameObject::getmove() const {$/;"	f	class:GameObject	typeref:typename:bool
handleInput	controller.cpp	/^void Controller::handleInput(int keyInput){$/;"	f	class:Controller	typeref:typename:void
hilit	AnsiPrint.cpp	/^const char *hilit="1;";$/;"	v	typeref:typename:const char *
icon_height	icon.cpp	/^size_t icon_height(const Icon& icon) {$/;"	f	typeref:typename:size_t
icon_width	icon.cpp	/^size_t icon_width(const Icon& icon) {$/;"	f	typeref:typename:size_t
init	AnsiPrint.cpp	/^const char *init="\\x1b[";$/;"	v	typeref:typename:const char *
kFormatStrSize	AnsiPrint.cpp	/^const int kFormatStrSize=20;$/;"	v	typeref:typename:const int
main	main.cpp	/^int main(){$/;"	f	typeref:typename:int
move	gameObject.cpp	/^void GameObject::move(int x,int y){$/;"	f	class:GameObject	typeref:typename:void
object	gameObjectFactory.cpp	/^object::object(Position pos, Icon icon, bool ismove){$/;"	f	class:object
read_input	controller.cpp	/^int read_input() {$/;"	f	typeref:typename:int
recover	AnsiPrint.cpp	/^const char *recover="\\x1b[0m";$/;"	v	typeref:typename:const char *
render	view.cpp	/^void View::render(){$/;"	f	class:View	typeref:typename:void
resetLatest	view.cpp	/^void View::resetLatest(){$/;"	f	class:View	typeref:typename:void
reset_terminal	controller.cpp	/^void reset_terminal() {$/;"	f	typeref:typename:void
run	controller.cpp	/^void Controller::run() {$/;"	f	class:Controller	typeref:typename:void
update	controller.cpp	/^void Controller::update(){$/;"	f	class:Controller	typeref:typename:void
update	gameObject.cpp	/^void GameObject::update() {$/;"	f	class:GameObject	typeref:typename:void
update	gameObjectFactory.cpp	/^void object::update(){$/;"	f	class:object	typeref:typename:void
updateGameObject	view.cpp	/^void View::updateGameObject(GameObject* obj) {$/;"	f	class:View	typeref:typename:void
